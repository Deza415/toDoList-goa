// Code generated by goa v3.20.1, DO NOT EDIT.
//
// todo HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/Deza415/toDoList-goa/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	todo "github.com/Deza415/toDoList-goa/gen/todo"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListResponse returns an encoder for responses returned by the todo
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*todo.Todo)
		enc := encoder(ctx, w)
		body := NewListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeCreateResponse returns an encoder for responses returned by the todo
// create endpoint.
func EncodeCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*todo.Todo)
		enc := encoder(ctx, w)
		body := NewCreateResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateRequest returns a decoder for requests sent to the todo create
// endpoint.
func DecodeCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body struct {
				// Title of the todo
				Title *string `form:"title" json:"title" xml:"title"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		if body.Title == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreatePayload(body)

		return payload, nil
	}
}

// marshalTodoTodoToTodoResponse builds a value of type *TodoResponse from a
// value of type *todo.Todo.
func marshalTodoTodoToTodoResponse(v *todo.Todo) *TodoResponse {
	res := &TodoResponse{
		ID:        v.ID,
		Title:     v.Title,
		Completed: v.Completed,
	}

	return res
}
