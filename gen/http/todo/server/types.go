// Code generated by goa v3.20.1, DO NOT EDIT.
//
// todo HTTP server types
//
// Command:
// $ goa gen github.com/Deza415/toDoList-goa/design

package server

import (
	todo "github.com/Deza415/toDoList-goa/gen/todo"
)

// ListResponseBody is the type of the "todo" service "list" endpoint HTTP
// response body.
type ListResponseBody []*TodoResponse

// CreateResponseBody is the type of the "todo" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// Unique ID
	ID int32 `form:"id" json:"id" xml:"id"`
	// Title of the todo
	Title string `form:"title" json:"title" xml:"title"`
	// Whether the todo is completed
	Completed bool `form:"completed" json:"completed" xml:"completed"`
}

// TodoResponse is used to define fields on response body types.
type TodoResponse struct {
	// Unique ID
	ID int32 `form:"id" json:"id" xml:"id"`
	// Title of the todo
	Title string `form:"title" json:"title" xml:"title"`
	// Whether the todo is completed
	Completed bool `form:"completed" json:"completed" xml:"completed"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "todo" service.
func NewListResponseBody(res []*todo.Todo) ListResponseBody {
	body := make([]*TodoResponse, len(res))
	for i, val := range res {
		body[i] = marshalTodoTodoToTodoResponse(val)
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "todo" service.
func NewCreateResponseBody(res *todo.Todo) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:        res.ID,
		Title:     res.Title,
		Completed: res.Completed,
	}
	return body
}

// NewCreatePayload builds a todo service create endpoint payload.
func NewCreatePayload(body struct {
	// Title of the todo
	Title *string `form:"title" json:"title" xml:"title"`
}) *todo.CreatePayload {
	v := &todo.CreatePayload{}
	if body.Title != nil {
		v.Title = *body.Title
	}

	return v
}
